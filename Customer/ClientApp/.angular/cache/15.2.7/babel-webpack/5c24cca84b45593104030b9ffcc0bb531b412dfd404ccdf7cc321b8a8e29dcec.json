{"ast":null,"code":"import { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../customer.service\";\nimport * as i3 from \"@angular/common\";\nfunction AddCustomerComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddCustomerComponent {\n  constructor(formBuilder, customerService, location) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.location = location;\n    this.saved = false;\n    this.nextId = 0;\n    this.customerForm = this.formBuilder.group({\n      firstname: '',\n      lastname: '',\n      email: new FormControl(\"\", [Validators.required]),\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      currency: '',\n      balance: 0\n    });\n    this.customerService.getCustomers().subscribe({\n      next: data => {\n        this.nextId = Math.max(...data.map(({\n          id\n        }) => Number(id))) + 1;\n      },\n      error: error => {\n        console.error('There was an error!', error);\n      }\n    });\n  }\n  add() {\n    this.saved = true;\n    let firstname = this.customerForm.value.firstname;\n    let lastname = this.customerForm.value.lastname;\n    let email = this.customerForm.value.email;\n    let phone_Number = this.customerForm.value.phone_Number;\n    let country_code = this.customerForm.value.country_code;\n    let gender = this.customerForm.value.gender;\n    let currency = this.customerForm.value.currency;\n    let balance = this.customerForm.value.balance;\n    let rowKey = `${this.nextId}`;\n    if (this.customerForm.valid) {\n      this.customerService.addCustomer({\n        firstname,\n        lastname,\n        email,\n        phone_Number,\n        country_code,\n        gender,\n        currency,\n        balance,\n        rowKey\n      }).subscribe(() => this.goBack());\n    }\n  }\n  goBack() {\n    this.location.back();\n  }\n  get registerFormControl() {\n    return this.customerForm.controls;\n  }\n}\nAddCustomerComponent.ɵfac = function AddCustomerComponent_Factory(t) {\n  return new (t || AddCustomerComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomerService), i0.ɵɵdirectiveInject(i3.Location));\n};\nAddCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddCustomerComponent,\n  selectors: [[\"app-add-customer\"]],\n  decls: 40,\n  vars: 2,\n  consts: [[\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"firstname\"], [\"id\", \"firstname\", \"type\", \"text\", \"formControlName\", \"firstname\", 1, \"form-control\"], [\"for\", \"lastname\"], [\"id\", \"lastname\", \"type\", \"text\", \"formControlName\", \"lastname\", 1, \"form-control\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"phone_Number\"], [\"id\", \"phone_Number\", \"type\", \"text\", \"formControlName\", \"phone_Number\", 1, \"form-control\"], [\"for\", \"country_code\"], [\"id\", \"country_code\", \"type\", \"text\", \"formControlName\", \"country_code\", 1, \"form-control\"], [\"for\", \"gender\"], [\"id\", \"gender\", \"type\", \"text\", \"formControlName\", \"gender\", 1, \"form-control\"], [\"for\", \"currency\"], [\"id\", \"currency\", \"type\", \"text\", \"formControlName\", \"currency\", 1, \"form-control\"], [\"for\", \"balance\"], [\"id\", \"balance\", \"type\", \"text\", \"formControlName\", \"balance\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"text-danger\"]],\n  template: function AddCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Add New Customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddCustomerComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.add();\n      });\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \" Firstname \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\")(9, \"label\", 4);\n      i0.ɵɵtext(10, \" Lastname \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\")(13, \"label\", 6);\n      i0.ɵɵtext(14, \" Emaill \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 7);\n      i0.ɵɵtemplate(16, AddCustomerComponent_span_16_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\")(18, \"label\", 9);\n      i0.ɵɵtext(19, \" Phone Number \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\", 11);\n      i0.ɵɵtext(23, \" Country Code \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\", 13);\n      i0.ɵɵtext(27, \" Gender \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(28, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\")(30, \"label\", 15);\n      i0.ɵɵtext(31, \" Currency \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\")(34, \"label\", 17);\n      i0.ɵɵtext(35, \" Balance \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(36, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(37, \"br\");\n      i0.ɵɵelementStart(38, \"button\", 19);\n      i0.ɵɵtext(39, \"Add\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.email.touched || ctx.saved) && (ctx.registerFormControl.email.errors == null ? null : ctx.registerFormControl.email.errors[\"required\"]));\n    }\n  },\n  styles: [\"@import url(https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css);\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","FormControl","i0","AddCustomerComponent","constructor","formBuilder","customerService","location","group","firstname","lastname","email","required","phone_Number","country_code","gender","currency","balance","getCustomers","subscribe","next","data","nextId","Math","max","map","id","Number","error","console","add","saved","customerForm","value","rowKey","valid","addCustomer","goBack","back","registerFormControl","controls","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\i24748\\OneDrive - Verisk Analytics\\Documents\\Project\\Customer\\Customer\\ClientApp\\src\\app\\add-customer\\add-customer.component.ts","C:\\Users\\i24748\\OneDrive - Verisk Analytics\\Documents\\Project\\Customer\\Customer\\ClientApp\\src\\app\\add-customer\\add-customer.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { Customer } from '../customer';\r\nimport { CustomerService } from '../customer.service';\r\nimport { Location } from '@angular/common';\r\n\n@Component({\n  selector: 'app-add-customer',\n  templateUrl: './add-customer.component.html',\n  styleUrls: ['./add-customer.component.css']\n})\nexport class AddCustomerComponent {\n  saved = false;\n  nextId: number = 0;\n  customer: Customer | undefined;\n  customerForm = this.formBuilder.group({\n    firstname: '',\n    lastname: '',\n    email: new FormControl(\"\", [Validators.required]),\n    phone_Number: '',\n    country_code: '',\n    gender: '',\n    currency: '',\n    balance: 0,\n  });\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomerService,\n    private location: Location\n  ) {\n    this.customerService.getCustomers()\n      .subscribe({\n        next: data => {\n          this.nextId = Math.max(...data.map(({ id }) => Number(id))) + 1;\n        },\n        error: error => {\n          console.error('There was an error!', error);\n        }\n      });\n  }\n\n  add(): void {\r\n    this.saved = true;\r\n\r\n    let firstname = this.customerForm.value.firstname;\r\n    let lastname = this.customerForm.value.lastname;\r\n    let email = this.customerForm.value.email;\r\n    let phone_Number = this.customerForm.value.phone_Number;\r\n    let country_code= this.customerForm.value.country_code;\r\n    let gender = this.customerForm.value.gender;\r\n    let currency = this.customerForm.value.currency;\r\n    let balance = this.customerForm.value.balance;\r\n\r\n    let rowKey = `${this.nextId}`;\r\n\r\n    if (this.customerForm.valid) {\r\n      this.customerService.addCustomer({ firstname, lastname, email, phone_Number, country_code, gender, currency, balance, rowKey } as Customer)\n      .subscribe(() => this.goBack());\r\n    }\r\n  }\n\n  goBack(): void { this.location.back(); }\n\n  protected get registerFormControl() {\r\n    return this.customerForm.controls;\r\n  }\n}\n","<h2>Add New Customer</h2>\n<br />\n<form [formGroup]=\"customerForm\" (ngSubmit)=\"add()\" autocomplete=\"off\">\n\n  <div class=\"form-group\">\n    <label for=\"firstname\">\n      Firstname\n    </label>\n    <input id=\"firstname\" class=\"form-control\" type=\"text\" formControlName=\"firstname\">\n\n  </div>\n\n  <div>\n    <label for=\"lastname\">\n      Lastname\n    </label>\n    <input id=\"lastname\" class=\"form-control\" type=\"text\" formControlName=\"lastname\">\n  </div>\n\n  <div>\n    <label for=\"email\">\n      Emaill\n    </label>\n    <input id=\"email\" class=\"form-control\" type=\"text\" formControlName=\"email\">\n    <span class=\"text-danger\"\n          *ngIf=\"\n                  (registerFormControl.email.touched || saved) &&\n                  registerFormControl.email.errors?.['required']\">\n      Email is required\n    </span>\n  </div>\n\n  <div>\n    <label for=\"phone_Number\">\n      Phone Number\n    </label>\n    <input id=\"phone_Number\" class=\"form-control\" type=\"text\" formControlName=\"phone_Number\">\n  </div>\n\n  <div>\n    <label for=\"country_code\">\n      Country Code\n    </label>\n    <input id=\"country_code\" class=\"form-control\" type=\"text\" formControlName=\"country_code\">\n  </div>\n\n  <div>\n    <label for=\"gender\">\n      Gender\n    </label>\n    <input id=\"gender\" class=\"form-control\" type=\"text\" formControlName=\"gender\">\n  </div>\n\n  <div>\n    <label for=\"currency\">\n      Currency\n    </label>\n    <input id=\"currency\" class=\"form-control\" type=\"text\" formControlName=\"currency\">\n  </div>\n\n  <div>\n    <label for=\"balance\">\n      Balance\n    </label>\n    <input id=\"balance\" class=\"form-control\" type=\"text\" formControlName=\"balance\">\n  </div>\n\n  <br />\n  <button class=\"btn btn-primary\" type=\"submit\">Add</button>\n\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}