{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../customer.service\";\nimport * as i3 from \"@angular/common\";\nexport class AddCustomerComponent {\n  constructor(formBuilder, customerService, location) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.location = location;\n    this.nextId = 0;\n    this.customerForm = this.formBuilder.group({\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      balance: 0\n    });\n    this.customerService.getCustomers().subscribe({\n      next: data => {\n        this.nextId = Math.max(...data.map(({\n          id\n        }) => Number(id))) + 1;\n      },\n      error: error => {\n        console.error('There was an error!', error);\n      }\n    });\n  }\n  add() {\n    let firstname = this.customerForm.value.firstname;\n    let lastname = this.customerForm.value.lastname;\n    let email = this.customerForm.value.email;\n    let phone_Number = this.customerForm.value.phone_Number;\n    let country_code = this.customerForm.value.country_code;\n    let gender = this.customerForm.value.gender;\n    let balance = this.customerForm.value.balance;\n    let rowKey = `${this.nextId}`;\n    this.customerService.addCustomer({\n      firstname,\n      lastname,\n      email,\n      phone_Number,\n      country_code,\n      gender,\n      balance,\n      rowKey\n    }).subscribe(() => this.goBack());\n  }\n  goBack() {\n    this.location.back();\n  }\n}\nAddCustomerComponent.ɵfac = function AddCustomerComponent_Factory(t) {\n  return new (t || AddCustomerComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomerService), i0.ɵɵdirectiveInject(i3.Location));\n};\nAddCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddCustomerComponent,\n  selectors: [[\"app-add-customer\"]],\n  decls: 36,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"firstname\"], [\"id\", \"firstname\", \"type\", \"text\", \"formControlName\", \"firstname\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"firstname\", \"ngModel\"], [\"for\", \"lastname\"], [\"id\", \"lastname\", \"type\", \"text\", \"formControlName\", \"lastname\", 1, \"form-control\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"phone_Number\"], [\"id\", \"phone_Number\", \"type\", \"text\", \"formControlName\", \"phone_Number\", 1, \"form-control\"], [\"for\", \"country_code\"], [\"id\", \"country_code\", \"type\", \"text\", \"formControlName\", \"country_code\", 1, \"form-control\"], [\"for\", \"gender\"], [\"id\", \"gender\", \"type\", \"text\", \"formControlName\", \"gender\", 1, \"form-control\"], [\"for\", \"balance\"], [\"id\", \"balance\", \"type\", \"text\", \"formControlName\", \"balance\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function AddCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Add New Customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddCustomerComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.add();\n      });\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \" Firstname \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function AddCustomerComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.customer.firstname = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\", 5);\n      i0.ɵɵtext(11, \" Lastname \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"label\", 7);\n      i0.ɵɵtext(15, \" Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\")(18, \"label\", 9);\n      i0.ɵɵtext(19, \" Phone Number \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\", 11);\n      i0.ɵɵtext(23, \" Country Code \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\", 13);\n      i0.ɵɵtext(27, \" Gender \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(28, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\")(30, \"label\", 15);\n      i0.ɵɵtext(31, \" Balance \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(33, \"br\");\n      i0.ɵɵelementStart(34, \"button\", 17);\n      i0.ɵɵtext(35, \"Add\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.customer.firstname);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"@import url(https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css);\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["AddCustomerComponent","constructor","formBuilder","customerService","location","group","firstname","lastname","email","phone_Number","country_code","gender","balance","getCustomers","subscribe","next","data","nextId","Math","max","map","id","Number","error","console","add","customerForm","value","rowKey","addCustomer","goBack","back","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\i24748\\OneDrive - Verisk Analytics\\Documents\\Project\\Customer\\Customer\\ClientApp\\src\\app\\add-customer\\add-customer.component.ts","C:\\Users\\i24748\\OneDrive - Verisk Analytics\\Documents\\Project\\Customer\\Customer\\ClientApp\\src\\app\\add-customer\\add-customer.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\r\nimport { Customer } from '../customer';\r\nimport { CustomerService } from '../customer.service';\r\nimport { Location } from '@angular/common';\r\n\n@Component({\n  selector: 'app-add-customer',\n  templateUrl: './add-customer.component.html',\n  styleUrls: ['./add-customer.component.css']\n})\nexport class AddCustomerComponent {\n  nextId: number = 0;\n  customer: Customer | undefined;\n  customerForm = this.formBuilder.group({\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone_Number: '',\n    country_code: '',\n    gender: '',\n    balance: 0,\n  });\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomerService,\n    private location: Location\n  ) {\n    this.customerService.getCustomers()\n      .subscribe({\n        next: data => {\n          this.nextId = Math.max(...data.map(({ id }) => Number(id))) + 1;\n        },\n        error: error => {\n          console.error('There was an error!', error);\n        }\n      });\n  }\n\n  add(): void {\r\n    let firstname = this.customerForm.value.firstname;\r\n    let lastname = this.customerForm.value.lastname;\r\n    let email = this.customerForm.value.email;\r\n    let phone_Number = this.customerForm.value.phone_Number;\r\n    let country_code= this.customerForm.value.country_code;\r\n    let gender = this.customerForm.value.gender;\r\n    let balance = this.customerForm.value.balance;\r\n\r\n    let rowKey = `${this.nextId}`;\r\n\r\n    this.customerService.addCustomer({ firstname, lastname, email, phone_Number, country_code, gender, balance, rowKey } as Customer)\n      .subscribe(() => this.goBack());\r\n  }\n\n  goBack(): void { this.location.back(); }\n}\n","<h2>Add New Customer</h2>\n<br />\n<form [formGroup]=\"customerForm\" (ngSubmit)=\"add()\">\n\n  <div class=\"form-group\">\n    <label for=\"firstname\">\n      Firstname\n    </label>\n    <input id=\"firstname\" class=\"form-control\" type=\"text\" formControlName=\"firstname\" required  [(ngModel)]=\"customer.firstname\" #firstname=\"ngModel\">\n\n  </div>\n\n  <div>\n    <label for=\"lastname\">\n      Lastname\n    </label>\n    <input id=\"lastname\" class=\"form-control\" type=\"text\" formControlName=\"lastname\">\n  </div>\n\n  <div>\n    <label for=\"email\">\n      Email\n    </label>\n    <input id=\"email\" class=\"form-control\" type=\"text\" formControlName=\"email\">\n  </div>\n\n  <div>\n    <label for=\"phone_Number\">\n      Phone Number\n    </label>\n    <input id=\"phone_Number\" class=\"form-control\" type=\"text\" formControlName=\"phone_Number\">\n  </div>\n\n  <div>\n    <label for=\"country_code\">\n      Country Code\n    </label>\n    <input id=\"country_code\" class=\"form-control\" type=\"text\" formControlName=\"country_code\">\n  </div>\n\n  <div>\n    <label for=\"gender\">\n      Gender\n    </label>\n    <input id=\"gender\" class=\"form-control\" type=\"text\" formControlName=\"gender\">\n  </div>\n\n  <div>\n    <label for=\"balance\">\n      Balance\n    </label>\n    <input id=\"balance\" class=\"form-control\" type=\"text\" formControlName=\"balance\">\n  </div>\n\n  <br />\n  <button class=\"btn btn-primary\" type=\"submit\">Add</button>\n\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}